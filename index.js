//apikey32357a0d

//AXIOS
// const fetchData = async (searchTerm) => {
//   const response = await axios.get("http://www.omdbapi.com/", {
//     params: { apikey: "32357a0d", s: searchTerm },
//   });
//   //console.log(response.data);

//   //error handling return nothing
//   if (response.data.Error) {
//     return [];
//   }
//   return response.data.Search;
// };

//The code we have right now, make many requests to server
//Want to send request when user stops typing
// const input = document.querySelector("input");
// input.addEventListener("input", (event) => {
//   //what use types in input
//   fetchData(event.target.value);
// });

//------------------------------------------------------------------------------//

//USING FETCH inside an async function and resolving promise outside
// async function featchApi() {
//   return await fetch("http://www.omdbapi.com/?apikey=32357a0d&s=dark+knight");
// }

// featchApi()
//   .then((response) => {
//     return response.json();
//   })
//   .then((data) => {
//     console.log(data);
//   });

//----------------------------------------------------------------------------------//

//TIMEOUT/DEBOUNCE FIRST ITERATION
//essentially when n+1 letter is typed, the n letter request is cleared
//and the n+1 letter request is given a time period of delay before executing
//const input = document.querySelector("input");

//define onInput function that will be passed as callback to eventlistener
// let timeoutId;

// const onInput = (event) => {
//   if (timeoutId) {
//     clearTimeout(timeoutId);
//   }
//   timeoutId = setTimeout(() => {
//     fetchData(event.target.value);
//   }, 1000);
// };

//add input event listener and call onInput function as callback
// input.addEventListener("input", onInput);

//-----------------------------------------------------------------------------------------//
//DEBOUNCE HELPER
//introduce some refactoring
//keep fetchData seperate from debouncing logic
//introduce a delay that can be changed but also set a default
//...args accepts all arguments
//func is like onInput
//will transfer to utils.js

// const input = document.querySelector("input");

// const debounce = (func, delay = 1000) => {
//   let timeoutId;
//   //returning a function which contains debouncing logic, representing as arrow representation
//   //if we do not know how many arguments to pass into function we are returning, use ...args
//   return (...args) => {
//     if (timeoutId) {
//       clearTimeout(timeoutId);
//     }
//     timeoutId = setTimeout(() => {
//       //fetchData(event.target.value);
//       //.apply() will execute func() and pass arguments passed in
//       func.apply(null, args);
//       //func is onInput which requires the event parameter
//       //this e parameter cannot be passed in as the third parameter because when we call the function, e needs to be defined
//       //therefore we introduce inside
//     }, delay);
//   };
// };

// //PROTECTING THIS FUNCTION
// const onInput = (event) => {
//   fetchData(event.target.value);
// };

// input.addEventListener("input", debounce(onInput, 500));

//---------------------------------------------//

//Execution with debounce function in utils.js

// const root = document.querySelector('.autocomplete');
// root.innerHTML = `
// <label><b>Search for a Movie</b></label>
// <input class="input" />
// <div class="dropdown">
//   <div class="dropdown-menu">
//     <div class="dropdown-content results"></div>
//   </div>
// </div>
// `

// const input = document.querySelector("input");
// const dropdown = document.querySelector('.dropdown');
// const resultsWrapper = document.querySelector('.results');

// const onInput = async (event) => {
//   //array of movies
//   const movies = await fetchData(event.target.value);
//   for (let movie of movies) {
//     const div = document.createElement("div");
//     div.innerHTML = `
//     <img src="${movie.Poster}" />
//     <h1>${movie.Title}</h1>
//     `;
//     document.querySelector("#target").appendChild(div);
//   }
// };

// input.addEventListener("input", debounce(onInput, 500));

//----------------------------------------------//
//HTML generated by JS
//BULMA.css
//Changes inside onInput function to update newly created elements

// const root = document.querySelector(".autocomplete");
// root.innerHTML = `
// <label><b>Search for a Movie</b></label>
// <input class="input" />
// <div class="dropdown">
//   <div class="dropdown-menu">
//     <div class="dropdown-content results"></div>
//   </div>
// </div>
// // `;

// const input = document.querySelector("input");
// const dropdown = document.querySelector(".dropdown");
// const resultsWrapper = document.querySelector(".results");

// const onInput = async (event) => {
//   //array of movies
//   const movies = await fetchData(event.target.value);

//   //if no results so movies array is empty do not show dropdown
//   if (!movies.length) {
//     dropdown.classList.remove("is-active");
//     return;
//   }

//   //clear older results before displaying new
//   resultsWrapper.innerHTML = "";

//   dropdown.classList.add("is-active");
//   for (let movie of movies) {
//     const option = document.createElement("a");
//     //handling image errors
//     const imgSrc = movie.Poster === "N/A" ? "" : movie.Poster;
//     option.classList.add("dropdown-item");
//     option.innerHTML = `
//     <img src="${imgSrc}" />
//     <h1>${movie.Title}</h1>
//     `;
//     //document.querySelector("#target").appendChild(div);
//     resultsWrapper.appendChild(option);

//     //add event listener to option
//     option.addEventListener("click", (event) => {
//       dropdown.classList.remove("is-active");
//       //still in for loop so still have reference to movie object
//       //no need to use const with input
//       input.value = movie.Title;
//       onMovieSelect(movie);
//     });
//   }
// };

// input.addEventListener("input", debounce(onInput, 500));

// //global event listener
// document.addEventListener("click", (event) => {
//   //event.target will give you h1, input tag clicked
//   //anything clicked outside autocomplete class will need to close the dropdown
//   //autocomplete class is contained inside the 'root' JS element
//   //event.target will return an element, if root contains that element that don't close else exit dropdown
//   if (!root.contains(event.target)) {
//     //removing is-active class removes the dropdown
//     dropdown.classList.remove("is-active");
//   }
// });

//make an autoCompleteConfig Object
const autoCompleteConfig = {
  renderOption(movie) {
    const imgSrc = movie.Poster === "N/A" ? "" : movie.Poster;
    return `
    <img src="${imgSrc}" />
    ${movie.Title}(${movie.Year})
    `;
  },
  inputValue(movie) {
    return movie.Title;
  },
  async fetchData(searchTerm) {
    const response = await axios.get("http://www.omdbapi.com/", {
      params: { apikey: "32357a0d", s: searchTerm },
    });
    //console.log(response.data);
    //error handling return nothing
    if (response.data.Error) {
      return [];
    }
    return response.data.Search;
  },
};

createAutoComplete({
  //take all functions inside autocompleteConfig and pass as argument
  ...autoCompleteConfig,
  root: document.querySelector("#left-autocomplete"),
  onOptionSelect(movie) {
    //hiding tutorial windows which has class of tutorial
    document.querySelector(".tutorial").classList.add("is-hidden");
    onMovieSelect(movie, document.querySelector("#left-summary"), "left");
  },
});

createAutoComplete({
  //take all functions inside autocompleteConfig and pass as argument
  ...autoCompleteConfig,
  root: document.querySelector("#right-autocomplete"),
  onOptionSelect(movie) {
    //hiding tutorial windows which has class of tutorial
    document.querySelector(".tutorial").classList.add("is-hidden");
    onMovieSelect(movie, document.querySelector("#right-summary"), "right");
  },
});

let leftMovie;
let rightMovie;
const onMovieSelect = async (movie, summaryElement, side) => {
  //second request will have movie.id as a parameter
  const response = await axios.get("http://www.omdbapi.com/", {
    params: { apikey: "32357a0d", i: `${movie.imdbID}` },
  });
  summaryElement.innerHTML = movieTemplate(response.data);
  if (side === "left") {
    leftMovie = response.data;
  } else {
    rightMovie = response.data;
  }

  const runComparison = () => {
    const leftSideStats = document.querySelectorAll(
      "#left-summary .notification"
    );
    const rightSideStats = document.querySelectorAll(
      "#right-summary .notification"
    );

    leftSideStats.forEach((leftStat, index) => {
      const rightStat = rightSideStats[index];
      const leftSideValue = parseInt(leftStat.dataset.value);
      const rightSideValue = parseInt(rightStat.dataset.value);

      if (rightSideValue > leftSideValue) {
        leftStat.classList.remove("is-primary");
        leftStat.classList.add("is-warning");
      } else {
        rightStat.classList.remove("is-primary");
        rightStat.classList.add("is-warning");
      }
    });
  };

  if (leftMovie && rightMovie) {
    runComparison();
  }
};

const movieTemplate = (movieDetail) => {
  const dollars = parseInt(
    movieDetail.BoxOffice.replace(/\$/g, "").replace(/,/g, "")
  );

  const metascore = parseInt(movieDetail.Metascore);
  const imdbRating = parseFloat(movieDetail.imdbRating);
  const imdbVotes = parseInt(movieDetail.imdbVotes.replace(/,/g, ""));
  const awards = movieDetail.Awards.split("").reduce((prev, word) => {
    const value = parseInt(word);

    if (isNaN(value)) {
      return prev;
    } else {
      return prev + value;
    }
  }, 0);
  return `
  <article class="media">
    <figure class="media-left">
      <p class="image">
        <img src="${movieDetail.Poster}"/>
      </p>
    </figure>

    <div class="media-content">
      <div class="content">
        <h1>${movieDetail.Title}</h1>
        <h4>${movieDetail.Genre}</h4>
        <p>${movieDetail.Plot}</p>
        </div>
    </div>
  </article>

  <article data-value=${awards} class="notification is-primary">
    <p class="title">${movieDetail.Awards}</p>
    <p class="subtitle">Awards</p>
  </article>

  <article data-value=${dollars} class="notification is-primary">
    <p class="title">${movieDetail.BoxOffice}</p>
    <p class="subtitle">Box Office</p>
  </article>

 <article data-value=${metascore} class="notification is-primary">
   <p class="title">${movieDetail.Metascore}</p>
   <p class="subtitle">Metascore</p>
 </article>

 <article data-value=${imdbRating} class="notification is-primary">
  <p class="title">${movieDetail.imdbRating}</p>
  <p class="subtitle">IMDB Rating</p>
 </article>

<article data-value=${imdbVotes} class="notification is-primary">
  <p class="title">${movieDetail.imdbVotes}</p>
  <p class="subtitle">IMDB Votes</p>
</article>
  `;
};
